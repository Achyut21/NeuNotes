// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    Int    @id @default(autoincrement())
  email String @unique
  name  String?
  // Additional fields can be added as needed
  // Relationships to categories can be added later (if needed)
}

model Category {
  id         Int      @id @default(autoincrement())
  name       String
  description String?
  createdBy  Int      // This will reference a user id (faculty)
  createdAt  DateTime @default(now())
}

model Subcategory {
  subcat_id   Int      @id @default(autoincrement())
  category_id Int
  title       String
  created_at  DateTime @default(now())
}

model Enrollment {
  id         Int      @id @default(autoincrement())
  studentId  Int
  categoryId Int
  enrolledAt DateTime @default(now())

  @@unique([studentId, categoryId])
}

model Upload {
  id            Int           @id @default(autoincrement())
  uploadedBy    String        // Changed from Int to String
  subcategoryId Int?          // Optional if needed
  uploadedAt    DateTime      @default(now())
  fileMetadata  FileMetadata? // One-to-one relation
}

model FileMetadata {
  id          Int     @id @default(autoincrement())
  uploadId    Int     @unique
  fileName    String
  fileType    String
  fileSize    Int
  fileUrl     String
  description String?
  upload      Upload  @relation(fields: [uploadId], references: [id])
}

model Activity {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  timestamp DateTime @default(now())
}

model Comment {
  id         Int      @id @default(autoincrement())
  uploadId   Int
  userId     Int
  content    String
  createdAt  DateTime @default(now())

  // In a real schema, youâ€™d add relations to Upload and User
}