// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String   @id @default(uuid()) // Using UUIDs or string for Firebase UIDs
  email    String   @unique
  name     String?
  role     Role     @default(STUDENT) // Default role is STUDENT
  // Other fields…
}

enum Role {
  ADMIN
  FACULTY
  STUDENT
}

model Category {
  id            Int            @id @default(autoincrement())
  name          String
  image         String?        // URL to display on the card
  createdBy     String         // Firebase UID of the Faculty/Admin who created it
  createdAt     DateTime       @default(now())
  subcategories Subcategory[]  // Optional: if you want to break categories into subcategories
}

model Subcategory {
  id         Int      @id @default(autoincrement())
  name       String
  categoryId Int
  createdBy  String   // Faculty/Admin UID
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id])
}

model Enrollment {
  id         Int      @id @default(autoincrement())
  studentId  Int
  categoryId Int
  enrolledAt DateTime @default(now())

  @@unique([studentId, categoryId])
}

model Upload {
  id            Int           @id @default(autoincrement())
  uploadedBy    String        // Changed from Int to String
  subcategoryId Int?          // Optional if needed
  uploadedAt    DateTime      @default(now())
  fileMetadata  FileMetadata? // One-to-one relation
}

model FileMetadata {
  id          Int     @id @default(autoincrement())
  uploadId    Int     @unique
  fileName    String
  fileType    String
  fileSize    Int
  fileUrl     String
  description String?
  upload      Upload  @relation(fields: [uploadId], references: [id])
}

model Activity {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  timestamp DateTime @default(now())
}

model Comment {
  id         Int      @id @default(autoincrement())
  uploadId   Int
  userId     Int
  content    String
  createdAt  DateTime @default(now())

  // In a real schema, you’d add relations to Upload and User
}